'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = applyMongoToKnex;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _isPlainObject = require('is-plain-object');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var OPERATORS = {
  $ne: '<>',
  $lt: '<',
  $lte: '<=',
  $gt: '>',
  $gte: '>='
};

var OPERATORS_KNEX_METHOD = {
  $and: 'where',
  $or: 'orWhere'
};

/**
 * Applies mongo standard query to knex query builder
 * @param  {Object} query : a query based on mongo standard query
 * @param  {Object} knex  : knex query builder
 */

function applyMongoToKnex(query, knex, parentKey, parentKnexMethodName) {
  Object.keys(query).forEach(function (key) {
    var value = query[key];

    if ((0, _isPlainObject2['default'])(value)) {
      return applyMongoToKnex(value, knex, key);
    }

    var knexMethodName = OPERATORS_KNEX_METHOD[key];
    if (knexMethodName) {
      return queryByMethod(knex, key, value, knexMethodName);
    }

    var column = parentKey || key;
    var operator = OPERATORS[key] || '=';

    var methodName = parentKnexMethodName || 'where';
    return knex[methodName](column, operator, value);
  });
}

function queryByMethod(knex, key, value, knexMethodName) {
  if (!Array.isArray(value)) {
    throw new Error(key + ' expect an array value');
  }

  knex.where(function () {
    var _this = this;

    value.forEach(function (item) {
      return applyMongoToKnex(item, _this, null, knexMethodName);
    });
  });
}
module.exports = exports['default'];